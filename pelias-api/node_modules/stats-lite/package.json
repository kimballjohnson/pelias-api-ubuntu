{
  "name": "stats-lite",
  "version": "1.0.3",
  "description": "A light statistical package that operates on numeric Arrays.",
  "main": "stats.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:brycebaril/node-stats-lite.git"
  },
  "keywords": [
    "stats",
    "statistics",
    "numbers",
    "math",
    "sum",
    "mean",
    "average",
    "mode",
    "median",
    "percentile",
    "variance",
    "deviation"
  ],
  "author": {
    "name": "Bryce B. Baril"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/brycebaril/node-stats-lite/issues"
  },
  "dependencies": {
    "isnumber": "~1.0.0"
  },
  "devDependencies": {
    "tape": "~2.10.2"
  },
  "readme": "stats-lite\n=====\n\n[![NPM](https://nodei.co/npm/stats-lite.png)](https://nodei.co/npm/stats-lite/)\n\nA fairly light statistical package for Node.js. Works with numeric arrays, and will automatically filter out non-numeric values and attempt to convert string numeric values.\n\nExample\n---\n\n[Live Demo using Browserify!](http://requirebin.com/embed?gist=brycebaril/9591291)\n\n```javascript\nvar stats = require(\"stats-lite\")\n\nvar dice = require(\"dice\")\n\nvar rolls = []\nfor (var i = 0; i < 3000; i++) {\n  rolls.push(dice.sum(dice.roll(\"2d6\")))\n}\n\nconsole.log(\"sum: %s\", stats.sum(rolls))\nconsole.log(\"mean: %s\", stats.mean(rolls))\nconsole.log(\"median: %s\", stats.median(rolls))\nconsole.log(\"mode: %s\", stats.mode(rolls))\nconsole.log(\"variance: %s\", stats.variance(rolls))\nconsole.log(\"standard deviation: %s\", stats.stdev(rolls))\nconsole.log(\"85th percentile: %s\", stats.percentile(rolls, 0.85))\n\n/* Your exact numbers may vary, but they should be pretty similar:\nsum: 21006\nmean: 7.002\nmedian: 7\nmode: 7\nvariance: 5.907329333333325\nstandard deviation: 2.430499811424252\n85th percentile: 10\n*/\n\n```\n\nAPI\n===\n\nAll of the exported functions take `vals` which is an array of numeric values. Non-numeric values will be removed, and string numbers will be converted to Numbers.\n\n**NOTE**: This will impact some operations, e.g. `mean([null, 1, 2, 3])` will be calculated as `mean([1, 2, 3])`, (e.g. `6 / 3 = 2`, NOT `6 / 4 = 1.5`)\n\n`numbers(vals)`\n---\n\nAccepts an array of values and returns an array consisting of only numeric values from the source array. Converts what it can and filters out anything else. e.g.\n\n```js\nnumbers([\"cat\", 1, \"22.9\", 9])\n// [1, 22.9, 9]\n```\n\n`sum(vals)`\n---\n\n[Sum](http://en.wikipedia.org/wiki/Summation) the values in the array.\n\n`mean(vals)`\n---\n\nCalculate the [mean](http://en.wikipedia.org/wiki/Mean) average value of vals.\n\n`median(vals)`\n---\n\nCalculate the [median](http://en.wikipedia.org/wiki/Median) average value of vals.\n\n`mode(vals)`\n---\n\nCalculate the [mode](http://en.wikipedia.org/wiki/Mode_statistics) average value of vals.\n\n`variance(vals)`\n---\n\nCalculate the [variance](http://en.wikipedia.org/wiki/Variance) from the mean.\n\n`stdev(vals)`\n---\n\nCalculate the [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation) of the values from the mean.\n\n`percentile(vals, ptile)`\n---\n\nCalculate the value reprecenting the desired [percentile](http://en.wikipedia.org/wiki/Percentile) `(0 < ptile <= 1)`. Uses the Estimation method to interpolate non-member percentiles.\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "stats-lite@1.0.3",
  "_from": "stats-lite@1.0.3"
}
