{
  "name": "geopipes-elasticsearch-backend",
  "author": {
    "name": "mapzen"
  },
  "version": "0.2.0",
  "description": "Elasticsearch backend with support for streaming bulk indexing",
  "homepage": "https://github.com/geopipes/elasticsearch-backend",
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "node test/run.js | tap-spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/geopipes/elasticsearch-backend.git"
  },
  "keywords": [
    "geopipes",
    "elasticsearch"
  ],
  "bugs": {
    "url": "https://github.com/geopipes/elasticsearch-backend/issues"
  },
  "engines": {
    "node": ">=0.10.26",
    "npm": ">=1.4.3",
    "elasticsearch": ">=1.1.1"
  },
  "dependencies": {
    "bun": "0.0.10",
    "merge": "^1.1.3",
    "through2": "^0.5.1"
  },
  "devDependencies": {
    "tape": "^2.13.4",
    "tap-spec": "^0.2.0"
  },
  "readme": "## Installation\n\n```bash\n$ npm install geopipes-elasticsearch-backend\n```\n\n[![NPM](https://nodei.co/npm/geopipes-elasticsearch-backend.png?downloads=true&stars=true)](https://nodei.co/npm/geopipes-elasticsearch-backend)\n\nNote: you will need `node` and `npm` installed first.\n\nThe easiest way to install `node.js` is with [nave.sh](https://github.com/isaacs/nave) by executing `[sudo] ./nave.sh usemain stable`\n\n## Interface\n\n```javascript\n// Get a single record from elasticsearch\nBackend.prototype.get = function( String key, Object opts, Function cb )\n\n// Get a multiple records from elasticsearch\nBackend.prototype.mget = function( Array ids, Object opts, Function cb )\n\n// Index a new document in elasticsearch\nBackend.prototype.put = function( String key, Object val, Object opts, Function cb )\n\n// Perform an arbitrary search against elasticsearch\nBackend.prototype.search = function( Object query, Object opts, Function cb )\n\n// Create a bulk indexing stream which you can pipe index operations to\nBackend.prototype.createPullStream = function()\n\n// Find the nearest document to the supplied centroid\nBackend.prototype.reverseGeo = function( Object centroid, Object opts, Function cb )\n\n// Perform a fields only reverse geocode to retrieve the admin heirachy\nBackend.prototype.findAdminHeirachy = function( Object centroid, Object opts, Function cb )\n```\n\n## Basic Usage\n\nYou will need a little knowledge of elasticsearch schemas to build more advanced indexers; however this example should be enough to get you started.\n\n```javascript\nvar esclient = require('pelias-esclient')();\nvar Backend = require('geopipes-elasticsearch-backend');\n\nvar elasticsearch = new Backend( esclient, 'example1', 'type1' );\n\n// Create a basic geo schema\nvar schema = {\n  mappings: {\n    type1: {\n      properties: {\n        name: { type : 'string' },\n        center_point: { type: 'geo_point', lat_lon: true }\n      }\n    }\n  }\n}\n\n// Create the schema\nesclient.indices.create( { index: 'example1', body: schema }, function( err, res ){\n\n  var opts = null;\n  var centroid = {\n    'lat': 50.1,\n    'lon': 100.45\n  };\n  var doc = {\n    'name': 'My POI',\n    'center_point': centroid\n  };\n\n  elasticsearch.put( 'myid', doc, opts, function( err, res ){\n    console.log( 'put', err, res );\n    elasticsearch.reverseGeo( centroid, opts, function( err, res ){\n      console.log( 'reverse geosearch', err, res );\n    });\n  });\n\n});\n```\n\nYou can view the indexed document here: [http://localhost:9200/example1/type1/myid](http://localhost:9200/example1/type1/myid)\n\n## Streaming Indexing\n\nNote: the streaming library flushes in batches so you may need to wait\na few seconds for the batch to be flushed.\n\n```javascript\nvar esclient = require('pelias-esclient')();\nvar Backend = require('geopipes-elasticsearch-backend');\n\nvar elasticsearch = new Backend( esclient, 'example2', 'type1' );\nvar stream = elasticsearch.createPullStream();\n\nstream.write({\n  'id': 'myid',\n  'name': 'My POI',\n  'center_point': {\n    'lat': 50.1,\n    'lon': 100.45\n  }\n});\n```\n\nYou can view the indexed document here: [http://localhost:9200/example2/type1/myid](http://localhost:9200/example2/type1/myid)\n\n## NPM Module\n\nThe `geopipes-elasticsearch-backend` npm module can be found here:\n\n[https://npmjs.org/package/geopipes-elasticsearch-backend](https://npmjs.org/package/geopipes-elasticsearch-backend)\n\n## Contributing\n\nPlease fork and pull request against upstream master on a feature branch.\n\nPretty please; provide unit tests and script fixtures in the `test` and `test/fixtures` directories.\n\n### Running Unit Tests\n\n```bash\n$ npm test\n```\n\n### Continuous Integration\n\nTravis tests every release against node version `0.10`\n\n[![Build Status](https://travis-ci.org/geopipes/elasticsearch-backend.png?branch=master)](https://travis-ci.org/geopipes/elasticsearch-backend)",
  "readmeFilename": "README.md",
  "_id": "geopipes-elasticsearch-backend@0.2.0",
  "_from": "geopipes-elasticsearch-backend@^0.2.0"
}
